Ниже приведены подробные сведения о настройке и сборке Clang в Windows с Visual Studio.
1) Необходимо наличие следующих инструментов:
   a) Git. Прежде чем устанавливать, проверьте, не установлен ли он уже, введя в консоль git --version
      Получить установщик можно здесь: https://git-scm.com/download
   b) CMake. Точно так же необходимо убедиться, установлен ли он. Команда для проверки cmake --version
      Получить установщик можно здесь: https://cmake.org/download/ Скачивать желательно собранные бинарники,
      а не исходники, а так же во время установки установить флажок добаления пути CMake в переменные среды,
      иначе это придется делать в ручную.
   c) Не будем упоминать наличие Visual Studio и пакета работы с C++. Однако, стоит уточнить, что
      Visual Studio должна быть 2019 16.7 или позднее.

2) Так как Clang входит в состав LLVM, получаем исходники LLVM из репозитория Git командой
   git clone https://github.com/llvm/llvm-project.git
   Само собой, предварительно нужно в консоли перейти в папку, где хотите разместить проект.

3) Данную папку с проектом покрытия кода неоходимо поместить в llvm-project/clang/tools/
   А также в папке llvm-project/clang/ в файл CMakeLists.txt добавить строчку
   add_clang_subdirectory(embedded-coverage-code-inserter) после строчки
   create_subdirectory_options(CLANG TOOL)

4) Теперь необходимо сгенерировать решения для Visual Studio со всеми проектами. В этом нам поможет CMake
   В консоли перейдите в папку llvm-project и выполните следующую последовательность команд:
     cd llvm-project
     mkdir build
     cd build
     cmake -DLLVM_ENABLE_PROJECTS=clang -G "Visual Studio 17 2022" -A x64 -Thost=x64 ..\llvm
   Последняя команда может иметь другой вид, если вы используете другую версию Visual Studio.
   Например, для VS 2019 "Visual Studio 17 2022" заменится на "Visual Studio 16 2019".
   * Чтобы сгенерировать двоичные файлы для x86 вместо x64, в команду нужно передать -A Win32 вместо -A x64.
   * В команду генерации входит флаг -Thost=x64, он требуется, так как 32-разрядному компоновщику не хватает памяти.

5) После завершения работы CMake по генерации решений, в папке llvm-project/build появится решение LLVM.sln,
   запустите его. Перед началом сборки проекта, в конфигурации решения необходимо выбрать сборку как RelWithDebInfo
   или Release (все же рекомендую RelWithDebInfo, в случае падения мржно будет получить дамп о выполении программы
   и понять, что могло пойти не так). В случае, если Вы попытаетесь собрать собрать проект в Debug конфигурации,
   скорее всего у Вас не хватит памяти в куче или на диске, т.к. такая сборка будет весить больше 100Гб.
   * В случае, если вы случайно запустили сборку всего решения или запустили сборку не в той конфигурации, во вкладке
     "Сборка" на такой случай есть пункт "Отмена", который аккуратно завершит сборку, если у него это конечно получится:)

6) В Обозревателе решений (Solution explorer) найдите папку Clang executables, в ней проект
   embedded-coverage-code-inserter. Нажатием правой кнопки мыши по данному проекту, вызовите контекстное меню и выбирите
   Собрать (Build). Первая сборка будет и собирает много других проектов, поэтому, возможно, у Вас появится соблазн
   собрать только этот проект (в контекстном меню проекта "Только этот проект" -> "Собрать только <название проета>"),
   однако это не сработает, т.к. при такой сборке не строятся проекты, от которых зависит проект покрытия кода.
   В моем случае на Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz и 8Гб оперативной памяти такая сборка занимала 1 час и 55 минут,
   так что советую запастись терпением и сходить пообедать=)

6) По окончании сборки, можно пользоваться программой.